#!/bin/sh

if [ `uname -s` = Darwin ]; then
	MAFIA_DIR="${HOME}/Library/Application Support/KoLmafia"
else
	MAFIA_DIR="${HOME}/.kolmafia"
fi

ROOT_DIR=${MAFIA_DIR}/program
VERSION_FILE=${MAFIA_DIR}/version
URL=http://ci.kolmafia.us/job/Kolmafia/lastSuccessfulBuild/artifact/dist/
COMMITURL=http://ci.kolmafia.us/job/Kolmafia/lastSuccessfulBuild/changes

if [ -f $VERSION_FILE ]; then
	version_number_old=`sed -n 1p < $VERSION_FILE`
	commitmsg_old=`sed -n 2p < $VERSION_FILE`
else
	version_number_old=0
fi

# colour names
bright_red=`printf "\033[31m\033[1m"`
bright_green=`printf "\033[32m\033[1m"`
bright_yellow=`printf "\033[33m\033[1m"`
bright_blue=`printf "\033[34m\033[1m"`
bright_magenta=`printf "\033[35m\033[1m"`
bright_cyan=`printf "\033[36m\033[1m"`
red=`printf "\033[31m"`
green=`printf "\033[32m"`
yellow=`printf "\033[33m"`
blue=`printf "\033[34m"`
magenta=`printf "\033[35m"`
cyan=`printf "\033[36m"`
reverse=`printf "\033[7m"`
normal=`printf "\033[0m"`
underline=`printf "\033[4m"`

java_path=`command -v java`
norun=false

lowercase() {
	echo "$@" | tr "[:upper:]" "[:lower:]"
}

parseonearg() {
	case $1 in
		--help|-help|--h|-h) echo "--Help";;
		--version|-version|--v|-v) echo "--Version";;
#		--
	esac
}

argparse() {
	i=0
	myargs=`lowercase $@`
	mafia_args=""
	for arg in "$@"; do
		i=$((i+1))
		if [ `lowercase $arg` = "--norun" ]; then norun=true; fi
		if [ `lowercase $arg` = "--java" ]; then
			java_path=`eval echo \$$i`
			break
		fi
	done
}

argparse "$@"



# Check for a java installation
[ -f $java_path ] || {
	printf "${reverse}${bright_red}ERROR${normal} -- You do not have java installed, or it is not in your \$PATH.\n"
	printf "If it is installed in a standard location, please specify \"--java /path/to/java\" on the command line.\n"
	printf "Otherwise, please install it using your system's package manager.  The following command lines are for common systems:\n"
	printf "OSX:            ${reverse}brew install java${normal}\n"
	printf "Ubuntu:         ${reverse}apt-get install openjdk-8-jdk${normal}\n"
	printf "Debian:         ${reverse}apt-get install java${normal}\n"
	printf "Fedora <22:     ${reverse}yum install java${normal}\n"
	printf "Fedora >=22:    ${reverse}dnf install java${normal}\n"
	printf "Most BSDs:      ${reverse}pkg install java${normal}\n"
	exit 1
}

# Pretty colours
yes() {
	printf "${bright_green}yes${normal}\n"
}
no() {
	printf "${bright_red}no${normal}\n"
}
# prints done, but that's a keyword
finished() {
	printf "${bright_magenta}done!${normal}\n"
}
check() {
	printf "${bright_cyan}Checking${normal} if ${bright_yellow}$@${normal}..."
}


# It's probably safe to just assume that if the dirs are there, the app is
# installed.  Yes, someone could tinker with this, but this is PROBABLY
# reasonable.
check "${normal}${magenta}${underline}KoLmafia${normal} ${bright_yellow}is installed"
if [ -d $MAFIA_DIR ]; then
	yes
	mafia_install=true
else
	no
	mafia_install=false
fi

if $mafia_install; then
	check "${normal}${magenta}${underline}Mafia autoupdater${normal} ${bright_yellow}is installed"
	if [ -d $ROOT_DIR ]; then
		yes
		new_updater_install=false
	else
		no
		new_updater_install=true
	fi
else
	new_updater_install=true
fi

if $new_updater_install; then
	mkdir -p $ROOT_DIR
fi


if ( ! $new_updater_install ); then
	check "the previous download was interrupted"
	if ( ls $ROOT_DIR/*.part > /dev/null 2>&1 ); then
		# don't use yes() because we want it red.  Same for "no"
		printf "${bright_red}yes${normal}\n"
		rm -f $ROOT_DIR/*.part
		session_interrupted=true
	else
		printf "${bright_green}no${normal}\n"
		session_interrupted=false
	fi
fi

if $new_updater_install; then
	printf "${bright_cyan}Downloading${normal} ${magenta}${underline}KoLmafia${normal} for the ${bright_yellow}first time${normal}..."
else
	if $session_interrupted; then
		printf "${bright_cyan}Downloading${normal} ${magenta}${underline}KoLmafia${normal} ${bright_yellow}again${normal}..."
	else
		check "a new version is available"
	fi
fi


version_number=`curl "${COMMITURL}" 2>/dev/null | sed -n 12p | sed -e "s/ *//g" -e "s/<a>//g" -e "s/<\/a>//g"`
download=$URL/KoLmafia-${version_number}.jar

getcommit() {
	if ( ${new_updater_install} || ( ! ${new_version} ) ); then
		printf "${green}Revision${normal} ${red}#${version_number},${normal} ${blue}\"${underline}${commitmsg}${normal}${blue}\"${normal}\n"
	else
		printf "${green}Fast-forward${normal} "

		no_commits="$((${version_number}-${version_number_old}))"

		# # of commits commits
		printf "${red}${no_commits}${normal} ${yellow}commit"
		if [ ! "$no_commits" -eq 1 ]; then printf "s"; fi
		printf "${normal}: "

		# #oldver (oldmsg) to #newver (newmsg)
		printf "${red}#${version_number_old}${normal} ${blue}(${underline}${commitmsg_old}${normal}${blue})${normal} to ${red}#${version_number}${normal} ${blue}(${underline}${commitmsg}${normal}${blue})${normal}\n"
	fi
}

if ( ! $new_updater_install ); then
	if [ ! $version_number = $version_number_old ]; then
		new_version=true
	else
		new_version=false
	fi
fi


if ( $new_updater_install || $session_interrupted ); then
	new_file=true

	commitmsg=`curl "${COMMITURL}" 2>/dev/null | sed -n 14p | sed -e "s/ *<\/b><br \/>//g" -e "s/<\/div><\/td>.*//g"`
	curl $download > $ROOT_DIR/$version_number.part 2>/dev/null
	finished
else
	if $new_version; then
		yes
		new_file=true
		printf "${bright_cyan}Downloading${normal} the ${bright_yellow}latest version of${normal} ${magenta}${underline}KoLmafia${normal}..."
		rm -rf $ROOT_DIR/*

		commitmsg=`curl "${COMMITURL}" 2>/dev/null | sed -n 14p | sed -e "s/ *<\/b><br \/>//g" -e "s/<\/div><\/td>.*//g"`
		curl $download > $ROOT_DIR/$version_number.part 2>/dev/null
		finished
	else
		printf "${bright_magenta}KoLmafia is up to date!${normal}\n"
		commitmsg="$commitmsg_old"
		new_file=false
	fi

fi

if ( ! $norun ); then
	getcommit
	printf "\n"
fi

printf "${version_number}\n${commitmsg}" > $VERSION_FILE
if $new_file; then mv $ROOT_DIR/$version_number.part $ROOT_DIR/$version_number; fi

if ( ! $norun ); then
	printf "${bright_cyan}Running${normal} ${magenta}${underline}KoLmafia${normal}.\n"
	$java_path -jar $ROOT_DIR/$version_number $@ || {
		printf "${bright_red}${reverse}Oops!${normal}  ${bright_red}This shouldn't happen!  It seems that the download was corrupted.  Please re-run KoLMafia autoupdater.  If the problem isn't fixed, try removing the $MAFIA_DIR dir or reinstalling java.\n"
		mv $ROOT_DIR/$version_number $ROOT_DIR/$version_number-broken
		exit 2
	}
fi
